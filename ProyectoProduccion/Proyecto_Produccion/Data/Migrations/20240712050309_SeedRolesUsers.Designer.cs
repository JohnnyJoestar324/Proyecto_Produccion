// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proyecto_Produccion.Data;

#nullable disable

namespace Proyecto_Produccion.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240712050309_SeedRolesUsers")]
    partial class SeedRolesUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c21468e1-6e45-4ed2-ad0b-1e440ba73d64",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fba3449f-716a-4da4-9852-7144c3fe303a",
                            RoleId = "c21468e1-6e45-4ed2-ad0b-1e440ba73d64"
                        },
                        new
                        {
                            UserId = "26468881-d870-4359-9564-63c707037db8",
                            RoleId = "c21468e1-6e45-4ed2-ad0b-1e440ba73d64"
                        },
                        new
                        {
                            UserId = "ae1d8f38-b4e4-4447-a056-74f1cddcf05f",
                            RoleId = "c21468e1-6e45-4ed2-ad0b-1e440ba73d64"
                        },
                        new
                        {
                            UserId = "f1b23f68-d05e-4cdf-8279-00bdf6a12a16",
                            RoleId = "c21468e1-6e45-4ed2-ad0b-1e440ba73d64"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Proyecto_Produccion.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "fba3449f-716a-4da4-9852-7144c3fe303a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15b2b2a0-0ffb-4b5a-a6b3-af480f083a34",
                            Email = "martinezjohnny324@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTINEZJOHNNY324@GMAIL.COM",
                            NormalizedUserName = "MARTINEZJOHNNY324@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECaS1D88i3mx5bTn0c1l1gR79Z0Isw6U7J75Iyoq4oTEBuZDBlACOgX9LPv/zlAxOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5af3f4a0-14d7-4fc5-9ece-2dc1f95a8291",
                            TwoFactorEnabled = false,
                            UserName = "martinezjohnny324@gmail.com",
                            FirstName = "Johnny",
                            LastName = "Eduardo"
                        },
                        new
                        {
                            Id = "26468881-d870-4359-9564-63c707037db8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a4e67af-b207-45b7-9f74-aaf9ae2120aa",
                            Email = "Rcairo09@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RCAIRO09@GMAIL.COM",
                            NormalizedUserName = "RCAIRO09@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBZ9H/lJjUmokD9ZLMf1XaE5Io/0/pdPSrifWLVXbf2O5ZLU7sAdo80O5uMReSBsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80da34a8-4ef3-4f9a-b972-a2caf902f690",
                            TwoFactorEnabled = false,
                            UserName = "Rcairo09@gmail.com",
                            FirstName = "DefaultFirstName",
                            LastName = "DefaultLastName"
                        },
                        new
                        {
                            Id = "ae1d8f38-b4e4-4447-a056-74f1cddcf05f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "263e6a42-2f3a-41c4-bc8a-6eb9f659ba51",
                            Email = "My10@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MY10@GMAIL.COM",
                            NormalizedUserName = "MY10@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGWervxYfBnOaWFsUM306/dPh0Z8k/2seYM8JGA7E+5GXnTvO5LTfUuXFdupOR6Tkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e8c8868-b5ef-482c-959a-ee3cfc9701c8",
                            TwoFactorEnabled = false,
                            UserName = "My10@gmail.com",
                            FirstName = "DefaultFirstName",
                            LastName = "DefaultLastName"
                        },
                        new
                        {
                            Id = "f1b23f68-d05e-4cdf-8279-00bdf6a12a16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47d15a52-514b-476b-9b84-2a8afb00da46",
                            Email = "Oteroanielka7@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OTEROANIELKA7@GMAIL.COM",
                            NormalizedUserName = "OTEROANIELKA7@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPCcFga5NcYX4HCMeLq902sjJiSrcb/nWu/pyCtLfy5xGkDmhlbfHGHyqZKUO+U0nA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4150f83b-22f2-4116-af6c-94e1aabc2b47",
                            TwoFactorEnabled = false,
                            UserName = "Oteroanielka7@gmail.com",
                            FirstName = "DefaultFirstName",
                            LastName = "DefaultLastName"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
